"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const mysql = require("mysql2/promise");
const inappropriateWords = ['fuck', 'shit']; // Add more inappropriate words
// validate the password
const validatePassword = (password) => {
    const specialCharacterRegex = /[!@#$%^&*(),.?":{}|<>]/;
    return password.length >= 8 && specialCharacterRegex.test(password);
};
//validate the email
const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
};
// AWS API Gateway
const handler = async (event) => {
    try {
        const body = JSON.parse(event.body || '{}'); //request body (an object [username : "", password: "", email : ""])
        const { username, password, email } = body;
        if (!username || !password || !email) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'All fields are required' }), // If the user didn't fill out one of the categories
            };
        }
        if (!validatePassword(password)) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Password must be at least 8 characters long and include one special character' }), //if the user didn't meet password requirements
            };
        }
        if (!validateEmail(email)) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Invalid email format' }), //if the user didn't meet email format
            };
        }
        const connection = await mysql.createConnection({
            host: process.env.RDS_ENDPOINT,
            user: process.env.RDS_USERNAME,
            password: process.env.RDS_PASSWORD,
            database: process.env.RDS_DATABASE_NAME,
        });
        const [rows] = await connection.execute('SELECT * FROM users WHERE email = ?', [email]);
        if (Array.isArray(rows) && rows.length > 0) { // Check if the email is already taken
            await connection.end();
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Email is already taken' }),
            };
        }
        const query = `INSERT INTO users (username, password, email) VALUES (?, ?, ?)`; //insert the new info to the database
        await connection.execute(query, [username, password, email]);
        await connection.end();
        return {
            statusCode: 201,
            body: JSON.stringify({ message: 'User signed up successfully' }), // successful sign up
        };
    }
    catch (error) {
        console.error('Error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Internal Server Error' }), //I hope this never occurs
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sYW1iZGEvU2luZ3VwL2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXdDO0FBU3hDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQywrQkFBK0I7QUFHNUUsd0JBQXdCO0FBQ3hCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxRQUFnQixFQUFXLEVBQUU7SUFDckQsTUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsQ0FBQztJQUN2RCxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0RSxDQUFDLENBQUM7QUFFRixvQkFBb0I7QUFDcEIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFhLEVBQVcsRUFBRTtJQUMvQyxNQUFNLFVBQVUsR0FBRyw0QkFBNEIsQ0FBQztJQUNoRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsa0JBQWtCO0FBQ1gsTUFBTSxPQUFPLEdBQTJCLEtBQUssRUFBRSxLQUFxQixFQUFFLEVBQUU7SUFDN0UsSUFBSSxDQUFDO1FBQ0gsTUFBTSxJQUFJLEdBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsb0VBQW9FO1FBRTVILE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztRQUUzQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckMsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSx5QkFBeUIsRUFBRSxDQUFDLEVBQUUsb0RBQW9EO2FBQ2pILENBQUM7UUFDSixDQUFDO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDaEMsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSwrRUFBK0UsRUFBRSxDQUFDLEVBQUUsK0NBQStDO2FBQ2xLLENBQUM7UUFDSixDQUFDO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzFCLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxFQUFFLHNDQUFzQzthQUNoRyxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQzlDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7WUFDOUIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtZQUM5QixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZO1lBQ2xDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQjtTQUN4QyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxVQUFVLENBQUMsT0FBTyxDQUFDLHFDQUFxQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUV4RixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHNDQUFzQztZQUNsRixNQUFNLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QixPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLHdCQUF3QixFQUFFLENBQUM7YUFDMUQsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLEtBQUssR0FBRyxnRUFBZ0UsQ0FBQyxDQUFDLHFDQUFxQztRQUVySCxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRXZCLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLENBQUMsRUFBRSxxQkFBcUI7U0FDeEYsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxFQUFFLDBCQUEwQjtTQUNyRixDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQTVEVyxRQUFBLE9BQU8sV0E0RGxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5SGFuZGxlciB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgKiBhcyBteXNxbCBmcm9tICdteXNxbDIvcHJvbWlzZSc7XHJcblxyXG4vLyBUaGlzIGlzIHRoZSByZXF1ZXN0IGJvZHksIGJ1dCBpbiB0aGUgc2hhcGUgb2YgYW4gaW50ZXJmYWNlXHJcbmludGVyZmFjZSBVc2VySW5wdXQge1xyXG4gIHVzZXJuYW1lOiBzdHJpbmc7XHJcbiAgcGFzc3dvcmQ6IHN0cmluZztcclxuICBlbWFpbDogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBpbmFwcHJvcHJpYXRlV29yZHMgPSBbJ2Z1Y2snLCAnc2hpdCddOyAvLyBBZGQgbW9yZSBpbmFwcHJvcHJpYXRlIHdvcmRzXHJcblxyXG5cclxuLy8gdmFsaWRhdGUgdGhlIHBhc3N3b3JkXHJcbmNvbnN0IHZhbGlkYXRlUGFzc3dvcmQgPSAocGFzc3dvcmQ6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gIGNvbnN0IHNwZWNpYWxDaGFyYWN0ZXJSZWdleCA9IC9bIUAjJCVeJiooKSwuP1wiOnt9fDw+XS87XHJcbiAgcmV0dXJuIHBhc3N3b3JkLmxlbmd0aCA+PSA4ICYmIHNwZWNpYWxDaGFyYWN0ZXJSZWdleC50ZXN0KHBhc3N3b3JkKTtcclxufTtcclxuXHJcbi8vdmFsaWRhdGUgdGhlIGVtYWlsXHJcbmNvbnN0IHZhbGlkYXRlRW1haWwgPSAoZW1haWw6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gIGNvbnN0IGVtYWlsUmVnZXggPSAvXlteXFxzQF0rQFteXFxzQF0rXFwuW15cXHNAXSskLztcclxuICByZXR1cm4gZW1haWxSZWdleC50ZXN0KGVtYWlsKTtcclxufTtcclxuXHJcbi8vIEFXUyBBUEkgR2F0ZXdheVxyXG5leHBvcnQgY29uc3QgaGFuZGxlcjogQVBJR2F0ZXdheVByb3h5SGFuZGxlciA9IGFzeW5jIChldmVudDogeyBib2R5OiBhbnk7IH0pID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYm9keTogVXNlcklucHV0ID0gSlNPTi5wYXJzZShldmVudC5ib2R5IHx8ICd7fScpOyAvL3JlcXVlc3QgYm9keSAoYW4gb2JqZWN0IFt1c2VybmFtZSA6IFwiXCIsIHBhc3N3b3JkOiBcIlwiLCBlbWFpbCA6IFwiXCJdKVxyXG5cclxuICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbCB9ID0gYm9keTtcclxuXHJcbiAgICBpZiAoIXVzZXJuYW1lIHx8ICFwYXNzd29yZCB8fCAhZW1haWwpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0FsbCBmaWVsZHMgYXJlIHJlcXVpcmVkJyB9KSwgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGZpbGwgb3V0IG9uZSBvZiB0aGUgY2F0ZWdvcmllc1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVQYXNzd29yZChwYXNzd29yZCkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ1Bhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmcgYW5kIGluY2x1ZGUgb25lIHNwZWNpYWwgY2hhcmFjdGVyJyB9KSwgLy9pZiB0aGUgdXNlciBkaWRuJ3QgbWVldCBwYXNzd29yZCByZXF1aXJlbWVudHNcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXZhbGlkYXRlRW1haWwoZW1haWwpKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6ICdJbnZhbGlkIGVtYWlsIGZvcm1hdCcgfSksIC8vaWYgdGhlIHVzZXIgZGlkbid0IG1lZXQgZW1haWwgZm9ybWF0XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oeyAvL0Nvbm5lY3QgdG8gYXdzIHJkc1xyXG4gICAgICBob3N0OiBwcm9jZXNzLmVudi5SRFNfRU5EUE9JTlQsXHJcbiAgICAgIHVzZXI6IHByb2Nlc3MuZW52LlJEU19VU0VSTkFNRSxcclxuICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlJEU19QQVNTV09SRCxcclxuICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LlJEU19EQVRBQkFTRV9OQU1FLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgW3Jvd3NdID0gYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlKCdTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIGVtYWlsID0gPycsIFtlbWFpbF0pO1xyXG4gICAgXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dzKSAmJiByb3dzLmxlbmd0aCA+IDApIHsgLy8gQ2hlY2sgaWYgdGhlIGVtYWlsIGlzIGFscmVhZHkgdGFrZW5cclxuICAgICAgYXdhaXQgY29ubmVjdGlvbi5lbmQoKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0VtYWlsIGlzIGFscmVhZHkgdGFrZW4nIH0pLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHF1ZXJ5ID0gYElOU0VSVCBJTlRPIHVzZXJzICh1c2VybmFtZSwgcGFzc3dvcmQsIGVtYWlsKSBWQUxVRVMgKD8sID8sID8pYDsgLy9pbnNlcnQgdGhlIG5ldyBpbmZvIHRvIHRoZSBkYXRhYmFzZVxyXG5cclxuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZShxdWVyeSwgW3VzZXJuYW1lLCBwYXNzd29yZCwgZW1haWxdKTtcclxuICAgIGF3YWl0IGNvbm5lY3Rpb24uZW5kKCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhdHVzQ29kZTogMjAxLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6ICdVc2VyIHNpZ25lZCB1cCBzdWNjZXNzZnVsbHknIH0pLCAvLyBzdWNjZXNzZnVsIHNpZ24gdXBcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0ludGVybmFsIFNlcnZlciBFcnJvcicgfSksIC8vSSBob3BlIHRoaXMgbmV2ZXIgb2NjdXJzXHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuIl19