"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const mysql = require("mysql2/promise");
const inappropriateWords = ['fuck', 'shit']; // Add more inappropriate words
// validate the password
const validatePassword = (password) => {
    const specialCharacterRegex = /[!@#$%^&*(),.?":{}|<>]/;
    return password.length >= 8 && specialCharacterRegex.test(password);
};
//validate the email
const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
};
// AWS API Gateway
const handler = async (event) => {
    try {
        const body = JSON.parse(event.body || '{}'); //request body (an object [username : "", password: "", email : ""])
        const { username, password, email } = body;
        if (!username || !password || !email) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'All fields are required' }), // If the user didn't fill out one of the categories
            };
        }
        if (!validatePassword(password)) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Password must be at least 8 characters long and include one special character' }), //if the user didn't meet password requirements
            };
        }
        if (!validateEmail(email)) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Invalid email format' }), //if the user didn't meet email format
            };
        }
        const connection = await mysql.createConnection({
            host: process.env.RDS_ENDPOINT,
            user: process.env.RDS_USERNAME,
            password: process.env.RDS_PASSWORD,
            database: process.env.RDS_DATABASE_NAME,
        });
        const [rows] = await connection.execute('SELECT * FROM users WHERE email = ?', [email]);
        if (Array.isArray(rows) && rows.length > 0) { // Check if the email is already taken
            await connection.end();
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'Email is already taken' }),
            };
        }
        const query = `INSERT INTO users (username, password, email) VALUES (?, ?, ?)`; //insert the new info to the database
        await connection.execute(query, [username, password, email]);
        await connection.end();
        return {
            statusCode: 201,
            body: JSON.stringify({ message: 'User signed up successfully' }), // successful sign up
        };
    }
    catch (error) {
        console.error('Error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Internal Server Error' }), //I hope this never occurs
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sYW1iZGEvaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFTeEMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLCtCQUErQjtBQUc1RSx3QkFBd0I7QUFDeEIsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFFBQWdCLEVBQVcsRUFBRTtJQUNyRCxNQUFNLHFCQUFxQixHQUFHLHdCQUF3QixDQUFDO0lBQ3ZELE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RFLENBQUMsQ0FBQztBQUVGLG9CQUFvQjtBQUNwQixNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQWEsRUFBVyxFQUFFO0lBQy9DLE1BQU0sVUFBVSxHQUFHLDRCQUE0QixDQUFDO0lBQ2hELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFFRixrQkFBa0I7QUFDWCxNQUFNLE9BQU8sR0FBMkIsS0FBSyxFQUFFLEtBQXFCLEVBQUUsRUFBRTtJQUM3RSxJQUFJLENBQUM7UUFDSCxNQUFNLElBQUksR0FBYyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxvRUFBb0U7UUFFNUgsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRTNDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQyxPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLHlCQUF5QixFQUFFLENBQUMsRUFBRSxvREFBb0Q7YUFDakgsQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNoQyxPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLCtFQUErRSxFQUFFLENBQUMsRUFBRSwrQ0FBK0M7YUFDbEssQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDMUIsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRSxDQUFDLEVBQUUsc0NBQXNDO2FBQ2hHLENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsZ0JBQWdCLENBQUM7WUFDOUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtZQUM5QixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZO1lBQzlCLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7WUFDbEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCO1NBQ3hDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMscUNBQXFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXhGLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsc0NBQXNDO1lBQ2xGLE1BQU0sVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQzthQUMxRCxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sS0FBSyxHQUFHLGdFQUFnRSxDQUFDLENBQUMscUNBQXFDO1FBRXJILE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFdkIsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQjtTQUN4RixDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxDQUFDLEVBQUUsMEJBQTBCO1NBQ3JGLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBNURXLFFBQUEsT0FBTyxXQTREbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSc7XHJcbmltcG9ydCAqIGFzIG15c3FsIGZyb20gJ215c3FsMi9wcm9taXNlJztcclxuXHJcbi8vIFRoaXMgaXMgdGhlIHJlcXVlc3QgYm9keSwgYnV0IGluIHRoZSBzaGFwZSBvZiBhbiBpbnRlcmZhY2VcclxuaW50ZXJmYWNlIFVzZXJJbnB1dCB7XHJcbiAgdXNlcm5hbWU6IHN0cmluZztcclxuICBwYXNzd29yZDogc3RyaW5nO1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IGluYXBwcm9wcmlhdGVXb3JkcyA9IFsnZnVjaycsICdzaGl0J107IC8vIEFkZCBtb3JlIGluYXBwcm9wcmlhdGUgd29yZHNcclxuXHJcblxyXG4vLyB2YWxpZGF0ZSB0aGUgcGFzc3dvcmRcclxuY29uc3QgdmFsaWRhdGVQYXNzd29yZCA9IChwYXNzd29yZDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XHJcbiAgY29uc3Qgc3BlY2lhbENoYXJhY3RlclJlZ2V4ID0gL1shQCMkJV4mKigpLC4/XCI6e318PD5dLztcclxuICByZXR1cm4gcGFzc3dvcmQubGVuZ3RoID49IDggJiYgc3BlY2lhbENoYXJhY3RlclJlZ2V4LnRlc3QocGFzc3dvcmQpO1xyXG59O1xyXG5cclxuLy92YWxpZGF0ZSB0aGUgZW1haWxcclxuY29uc3QgdmFsaWRhdGVFbWFpbCA9IChlbWFpbDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XHJcbiAgY29uc3QgZW1haWxSZWdleCA9IC9eW15cXHNAXStAW15cXHNAXStcXC5bXlxcc0BdKyQvO1xyXG4gIHJldHVybiBlbWFpbFJlZ2V4LnRlc3QoZW1haWwpO1xyXG59O1xyXG5cclxuLy8gQVdTIEFQSSBHYXRld2F5XHJcbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBBUElHYXRld2F5UHJveHlIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiB7IGJvZHk6IGFueTsgfSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBib2R5OiBVc2VySW5wdXQgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkgfHwgJ3t9Jyk7IC8vcmVxdWVzdCBib2R5IChhbiBvYmplY3QgW3VzZXJuYW1lIDogXCJcIiwgcGFzc3dvcmQ6IFwiXCIsIGVtYWlsIDogXCJcIl0pXHJcblxyXG4gICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIGVtYWlsIH0gPSBib2R5O1xyXG5cclxuICAgIGlmICghdXNlcm5hbWUgfHwgIXBhc3N3b3JkIHx8ICFlbWFpbCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQnIH0pLCAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZmlsbCBvdXQgb25lIG9mIHRoZSBjYXRlZ29yaWVzXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkKSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgbG9uZyBhbmQgaW5jbHVkZSBvbmUgc3BlY2lhbCBjaGFyYWN0ZXInIH0pLCAvL2lmIHRoZSB1c2VyIGRpZG4ndCBtZWV0IHBhc3N3b3JkIHJlcXVpcmVtZW50c1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVFbWFpbChlbWFpbCkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0ludmFsaWQgZW1haWwgZm9ybWF0JyB9KSwgLy9pZiB0aGUgdXNlciBkaWRuJ3QgbWVldCBlbWFpbCBmb3JtYXRcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7IC8vQ29ubmVjdCB0byBhd3MgcmRzXHJcbiAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LlJEU19FTkRQT0lOVCxcclxuICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuUkRTX1VTRVJOQU1FLFxyXG4gICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUkRTX1BBU1NXT1JELFxyXG4gICAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuUkRTX0RBVEFCQVNFX05BTUUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBbcm93c10gPSBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGUoJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgZW1haWwgPSA/JywgW2VtYWlsXSk7XHJcbiAgICBcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHJvd3MpICYmIHJvd3MubGVuZ3RoID4gMCkgeyAvLyBDaGVjayBpZiB0aGUgZW1haWwgaXMgYWxyZWFkeSB0YWtlblxyXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmVuZCgpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnRW1haWwgaXMgYWxyZWFkeSB0YWtlbicgfSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcXVlcnkgPSBgSU5TRVJUIElOVE8gdXNlcnMgKHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwpIFZBTFVFUyAoPywgPywgPylgOyAvL2luc2VydCB0aGUgbmV3IGluZm8gdG8gdGhlIGRhdGFiYXNlXHJcblxyXG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlKHF1ZXJ5LCBbdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbF0pO1xyXG4gICAgYXdhaXQgY29ubmVjdGlvbi5lbmQoKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGF0dXNDb2RlOiAyMDEsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ1VzZXIgc2lnbmVkIHVwIHN1Y2Nlc3NmdWxseScgfSksIC8vIHN1Y2Nlc3NmdWwgc2lnbiB1cFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhdHVzQ29kZTogNTAwLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyB9KSwgLy9JIGhvcGUgdGhpcyBuZXZlciBvY2N1cnNcclxuICAgIH07XHJcbiAgfVxyXG59O1xyXG4iXX0=